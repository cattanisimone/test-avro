/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.test.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class MyClass extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3303793225126629780L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"MyClass\",\"namespace\":\"com.test.avro\",\"fields\":[{\"name\":\"date\",\"type\":\"string\"},{\"name\":\"temp_min\",\"type\":\"double\"},{\"name\":\"temp_max\",\"type\":\"double\"},{\"name\":\"rainfall\",\"type\":\"double\"},{\"name\":\"evaporation\",\"type\":\"string\"},{\"name\":\"sunshine\",\"type\":\"string\"},{\"name\":\"wind_direction\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<MyClass> ENCODER =
      new BinaryMessageEncoder<MyClass>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<MyClass> DECODER =
      new BinaryMessageDecoder<MyClass>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<MyClass> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<MyClass> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<MyClass> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<MyClass>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this MyClass to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a MyClass from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a MyClass instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static MyClass fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.CharSequence date;
   private double temp_min;
   private double temp_max;
   private double rainfall;
   private java.lang.CharSequence evaporation;
   private java.lang.CharSequence sunshine;
   private java.lang.CharSequence wind_direction;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public MyClass() {}

  /**
   * All-args constructor.
   * @param date The new value for date
   * @param temp_min The new value for temp_min
   * @param temp_max The new value for temp_max
   * @param rainfall The new value for rainfall
   * @param evaporation The new value for evaporation
   * @param sunshine The new value for sunshine
   * @param wind_direction The new value for wind_direction
   */
  public MyClass(java.lang.CharSequence date, java.lang.Double temp_min, java.lang.Double temp_max, java.lang.Double rainfall, java.lang.CharSequence evaporation, java.lang.CharSequence sunshine, java.lang.CharSequence wind_direction) {
    this.date = date;
    this.temp_min = temp_min;
    this.temp_max = temp_max;
    this.rainfall = rainfall;
    this.evaporation = evaporation;
    this.sunshine = sunshine;
    this.wind_direction = wind_direction;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return date;
    case 1: return temp_min;
    case 2: return temp_max;
    case 3: return rainfall;
    case 4: return evaporation;
    case 5: return sunshine;
    case 6: return wind_direction;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: date = (java.lang.CharSequence)value$; break;
    case 1: temp_min = (java.lang.Double)value$; break;
    case 2: temp_max = (java.lang.Double)value$; break;
    case 3: rainfall = (java.lang.Double)value$; break;
    case 4: evaporation = (java.lang.CharSequence)value$; break;
    case 5: sunshine = (java.lang.CharSequence)value$; break;
    case 6: wind_direction = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'date' field.
   * @return The value of the 'date' field.
   */
  public java.lang.CharSequence getDate() {
    return date;
  }


  /**
   * Sets the value of the 'date' field.
   * @param value the value to set.
   */
  public void setDate(java.lang.CharSequence value) {
    this.date = value;
  }

  /**
   * Gets the value of the 'temp_min' field.
   * @return The value of the 'temp_min' field.
   */
  public double getTempMin() {
    return temp_min;
  }


  /**
   * Sets the value of the 'temp_min' field.
   * @param value the value to set.
   */
  public void setTempMin(double value) {
    this.temp_min = value;
  }

  /**
   * Gets the value of the 'temp_max' field.
   * @return The value of the 'temp_max' field.
   */
  public double getTempMax() {
    return temp_max;
  }


  /**
   * Sets the value of the 'temp_max' field.
   * @param value the value to set.
   */
  public void setTempMax(double value) {
    this.temp_max = value;
  }

  /**
   * Gets the value of the 'rainfall' field.
   * @return The value of the 'rainfall' field.
   */
  public double getRainfall() {
    return rainfall;
  }


  /**
   * Sets the value of the 'rainfall' field.
   * @param value the value to set.
   */
  public void setRainfall(double value) {
    this.rainfall = value;
  }

  /**
   * Gets the value of the 'evaporation' field.
   * @return The value of the 'evaporation' field.
   */
  public java.lang.CharSequence getEvaporation() {
    return evaporation;
  }


  /**
   * Sets the value of the 'evaporation' field.
   * @param value the value to set.
   */
  public void setEvaporation(java.lang.CharSequence value) {
    this.evaporation = value;
  }

  /**
   * Gets the value of the 'sunshine' field.
   * @return The value of the 'sunshine' field.
   */
  public java.lang.CharSequence getSunshine() {
    return sunshine;
  }


  /**
   * Sets the value of the 'sunshine' field.
   * @param value the value to set.
   */
  public void setSunshine(java.lang.CharSequence value) {
    this.sunshine = value;
  }

  /**
   * Gets the value of the 'wind_direction' field.
   * @return The value of the 'wind_direction' field.
   */
  public java.lang.CharSequence getWindDirection() {
    return wind_direction;
  }


  /**
   * Sets the value of the 'wind_direction' field.
   * @param value the value to set.
   */
  public void setWindDirection(java.lang.CharSequence value) {
    this.wind_direction = value;
  }

  /**
   * Creates a new MyClass RecordBuilder.
   * @return A new MyClass RecordBuilder
   */
  public static com.test.avro.MyClass.Builder newBuilder() {
    return new com.test.avro.MyClass.Builder();
  }

  /**
   * Creates a new MyClass RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new MyClass RecordBuilder
   */
  public static com.test.avro.MyClass.Builder newBuilder(com.test.avro.MyClass.Builder other) {
    if (other == null) {
      return new com.test.avro.MyClass.Builder();
    } else {
      return new com.test.avro.MyClass.Builder(other);
    }
  }

  /**
   * Creates a new MyClass RecordBuilder by copying an existing MyClass instance.
   * @param other The existing instance to copy.
   * @return A new MyClass RecordBuilder
   */
  public static com.test.avro.MyClass.Builder newBuilder(com.test.avro.MyClass other) {
    if (other == null) {
      return new com.test.avro.MyClass.Builder();
    } else {
      return new com.test.avro.MyClass.Builder(other);
    }
  }

  /**
   * RecordBuilder for MyClass instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<MyClass>
    implements org.apache.avro.data.RecordBuilder<MyClass> {

    private java.lang.CharSequence date;
    private double temp_min;
    private double temp_max;
    private double rainfall;
    private java.lang.CharSequence evaporation;
    private java.lang.CharSequence sunshine;
    private java.lang.CharSequence wind_direction;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.test.avro.MyClass.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.date)) {
        this.date = data().deepCopy(fields()[0].schema(), other.date);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.temp_min)) {
        this.temp_min = data().deepCopy(fields()[1].schema(), other.temp_min);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.temp_max)) {
        this.temp_max = data().deepCopy(fields()[2].schema(), other.temp_max);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.rainfall)) {
        this.rainfall = data().deepCopy(fields()[3].schema(), other.rainfall);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.evaporation)) {
        this.evaporation = data().deepCopy(fields()[4].schema(), other.evaporation);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.sunshine)) {
        this.sunshine = data().deepCopy(fields()[5].schema(), other.sunshine);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.wind_direction)) {
        this.wind_direction = data().deepCopy(fields()[6].schema(), other.wind_direction);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
    }

    /**
     * Creates a Builder by copying an existing MyClass instance
     * @param other The existing instance to copy.
     */
    private Builder(com.test.avro.MyClass other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.date)) {
        this.date = data().deepCopy(fields()[0].schema(), other.date);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.temp_min)) {
        this.temp_min = data().deepCopy(fields()[1].schema(), other.temp_min);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.temp_max)) {
        this.temp_max = data().deepCopy(fields()[2].schema(), other.temp_max);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.rainfall)) {
        this.rainfall = data().deepCopy(fields()[3].schema(), other.rainfall);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.evaporation)) {
        this.evaporation = data().deepCopy(fields()[4].schema(), other.evaporation);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.sunshine)) {
        this.sunshine = data().deepCopy(fields()[5].schema(), other.sunshine);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.wind_direction)) {
        this.wind_direction = data().deepCopy(fields()[6].schema(), other.wind_direction);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'date' field.
      * @return The value.
      */
    public java.lang.CharSequence getDate() {
      return date;
    }


    /**
      * Sets the value of the 'date' field.
      * @param value The value of 'date'.
      * @return This builder.
      */
    public com.test.avro.MyClass.Builder setDate(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.date = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'date' field has been set.
      * @return True if the 'date' field has been set, false otherwise.
      */
    public boolean hasDate() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'date' field.
      * @return This builder.
      */
    public com.test.avro.MyClass.Builder clearDate() {
      date = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'temp_min' field.
      * @return The value.
      */
    public double getTempMin() {
      return temp_min;
    }


    /**
      * Sets the value of the 'temp_min' field.
      * @param value The value of 'temp_min'.
      * @return This builder.
      */
    public com.test.avro.MyClass.Builder setTempMin(double value) {
      validate(fields()[1], value);
      this.temp_min = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'temp_min' field has been set.
      * @return True if the 'temp_min' field has been set, false otherwise.
      */
    public boolean hasTempMin() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'temp_min' field.
      * @return This builder.
      */
    public com.test.avro.MyClass.Builder clearTempMin() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'temp_max' field.
      * @return The value.
      */
    public double getTempMax() {
      return temp_max;
    }


    /**
      * Sets the value of the 'temp_max' field.
      * @param value The value of 'temp_max'.
      * @return This builder.
      */
    public com.test.avro.MyClass.Builder setTempMax(double value) {
      validate(fields()[2], value);
      this.temp_max = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'temp_max' field has been set.
      * @return True if the 'temp_max' field has been set, false otherwise.
      */
    public boolean hasTempMax() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'temp_max' field.
      * @return This builder.
      */
    public com.test.avro.MyClass.Builder clearTempMax() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'rainfall' field.
      * @return The value.
      */
    public double getRainfall() {
      return rainfall;
    }


    /**
      * Sets the value of the 'rainfall' field.
      * @param value The value of 'rainfall'.
      * @return This builder.
      */
    public com.test.avro.MyClass.Builder setRainfall(double value) {
      validate(fields()[3], value);
      this.rainfall = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'rainfall' field has been set.
      * @return True if the 'rainfall' field has been set, false otherwise.
      */
    public boolean hasRainfall() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'rainfall' field.
      * @return This builder.
      */
    public com.test.avro.MyClass.Builder clearRainfall() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'evaporation' field.
      * @return The value.
      */
    public java.lang.CharSequence getEvaporation() {
      return evaporation;
    }


    /**
      * Sets the value of the 'evaporation' field.
      * @param value The value of 'evaporation'.
      * @return This builder.
      */
    public com.test.avro.MyClass.Builder setEvaporation(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.evaporation = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'evaporation' field has been set.
      * @return True if the 'evaporation' field has been set, false otherwise.
      */
    public boolean hasEvaporation() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'evaporation' field.
      * @return This builder.
      */
    public com.test.avro.MyClass.Builder clearEvaporation() {
      evaporation = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'sunshine' field.
      * @return The value.
      */
    public java.lang.CharSequence getSunshine() {
      return sunshine;
    }


    /**
      * Sets the value of the 'sunshine' field.
      * @param value The value of 'sunshine'.
      * @return This builder.
      */
    public com.test.avro.MyClass.Builder setSunshine(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.sunshine = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'sunshine' field has been set.
      * @return True if the 'sunshine' field has been set, false otherwise.
      */
    public boolean hasSunshine() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'sunshine' field.
      * @return This builder.
      */
    public com.test.avro.MyClass.Builder clearSunshine() {
      sunshine = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'wind_direction' field.
      * @return The value.
      */
    public java.lang.CharSequence getWindDirection() {
      return wind_direction;
    }


    /**
      * Sets the value of the 'wind_direction' field.
      * @param value The value of 'wind_direction'.
      * @return This builder.
      */
    public com.test.avro.MyClass.Builder setWindDirection(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.wind_direction = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'wind_direction' field has been set.
      * @return True if the 'wind_direction' field has been set, false otherwise.
      */
    public boolean hasWindDirection() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'wind_direction' field.
      * @return This builder.
      */
    public com.test.avro.MyClass.Builder clearWindDirection() {
      wind_direction = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public MyClass build() {
      try {
        MyClass record = new MyClass();
        record.date = fieldSetFlags()[0] ? this.date : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.temp_min = fieldSetFlags()[1] ? this.temp_min : (java.lang.Double) defaultValue(fields()[1]);
        record.temp_max = fieldSetFlags()[2] ? this.temp_max : (java.lang.Double) defaultValue(fields()[2]);
        record.rainfall = fieldSetFlags()[3] ? this.rainfall : (java.lang.Double) defaultValue(fields()[3]);
        record.evaporation = fieldSetFlags()[4] ? this.evaporation : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.sunshine = fieldSetFlags()[5] ? this.sunshine : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.wind_direction = fieldSetFlags()[6] ? this.wind_direction : (java.lang.CharSequence) defaultValue(fields()[6]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<MyClass>
    WRITER$ = (org.apache.avro.io.DatumWriter<MyClass>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<MyClass>
    READER$ = (org.apache.avro.io.DatumReader<MyClass>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.date);

    out.writeDouble(this.temp_min);

    out.writeDouble(this.temp_max);

    out.writeDouble(this.rainfall);

    out.writeString(this.evaporation);

    out.writeString(this.sunshine);

    out.writeString(this.wind_direction);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.date = in.readString(this.date instanceof Utf8 ? (Utf8)this.date : null);

      this.temp_min = in.readDouble();

      this.temp_max = in.readDouble();

      this.rainfall = in.readDouble();

      this.evaporation = in.readString(this.evaporation instanceof Utf8 ? (Utf8)this.evaporation : null);

      this.sunshine = in.readString(this.sunshine instanceof Utf8 ? (Utf8)this.sunshine : null);

      this.wind_direction = in.readString(this.wind_direction instanceof Utf8 ? (Utf8)this.wind_direction : null);

    } else {
      for (int i = 0; i < 7; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.date = in.readString(this.date instanceof Utf8 ? (Utf8)this.date : null);
          break;

        case 1:
          this.temp_min = in.readDouble();
          break;

        case 2:
          this.temp_max = in.readDouble();
          break;

        case 3:
          this.rainfall = in.readDouble();
          break;

        case 4:
          this.evaporation = in.readString(this.evaporation instanceof Utf8 ? (Utf8)this.evaporation : null);
          break;

        case 5:
          this.sunshine = in.readString(this.sunshine instanceof Utf8 ? (Utf8)this.sunshine : null);
          break;

        case 6:
          this.wind_direction = in.readString(this.wind_direction instanceof Utf8 ? (Utf8)this.wind_direction : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










